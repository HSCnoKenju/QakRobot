System   obstacle_mapper   



Dispatch cmd       	: cmd(MOVE)     
Dispatch end       	: end(ARG)  
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
   
   
Context ctxobstaclemapper ip [host="127.0.0.1" port=8021]
  
Context ctxbasicrobot ip [host="localhost" port=8020]  
 

 ExternalQActor basicrobot context ctxbasicrobot
 
 
 QActor mapper_with_obstacle context ctxobstaclemapper {
 	
 
 
 	[#
 		
 		var max_column_value = 0
 		var cur_column_value = 0
 	
 		
 		var max_column_index = 0
 		var cur_column_index = 0
 		
 		var done_return = 0
 		
 		var done_back = 0
 		
 		var done_head = 0
 	
 	#]
 	
 	State s0 initial {
 		printCurrentMessage
 		[# unibo.kotlin.planner22Util.initAI() #]
		
		[# unibo.kotlin.planner22Util.showMap() #]
		
		delay 300
		
		
}
Goto moveDown // separo IL PRIMO PASSO così da poter gestire il double turn and step

 State moveDown{
 	printCurrentMessage
 	
		request basicrobot -m step: step(300) 

		println("waiting for step response------------------") 
		
 	
 	}
 	
 	Transition t1 whenReply stepdone -> goingDown
 				  whenReply stepfail -> lookingUp
 	
 	
 	State goingDown {
 		
 		printCurrentMessage
 		
 		[# cur_column_value ++
 		
 			println("column value $cur_column_value")	
 		#]
 		delay 300
 		[# unibo.kotlin.planner22Util.doMove("w") #]
 		
		[# unibo.kotlin.planner22Util.showMap() #]
 		
		request basicrobot -m step: step(300) 

		println("waiting for step response------------------") 
 	}
 	
 	Transition t2 whenReply stepdone -> goingDown
 				  whenReply stepfail -> lookingUp
 				  
 	State lookingUp {
 		printCurrentMessage
 		
 		[# if (cur_column_value > max_column_value){
 			max_column_value = cur_column_value
 			max_column_index = cur_column_index
 		}#]
 		
 		
 		[# unibo.kotlin.planner22Util.updateMapObstacleOnCurrentDirection()#]

 		forward basicrobot -m cmd : cmd(l)
 		delay 300
 		forward basicrobot -m cmd : cmd(l)
 		
 		[# unibo.kotlin.planner22Util.doMove("l") #]
 		[# unibo.kotlin.planner22Util.doMove("l") #]
 		
 		request basicrobot -m step: step(300)
 		
 	}
 	
 	Transition t2 whenReply stepdone -> returnRow0
 	
 	
 	State returnRow0{
 		println("=========================================================================================")
 		printCurrentMessage
 		
		 		
// 		[# unibo.kotlin.planner22Util.doMove("w") #]
// 		[# unibo.kotlin.planner22Util.showMap() #]
// 		[# done_return++ #]
// 		[# println("done_return $done_return column value $cur_column_value") #]
 		request basicrobot -m step: step(300) 
 		
 		
 		
 	}
// 	Transition t3  whenReply stepdone and [#done_return == cur_column_value#] -> changeColumn 
// 				   whenReply stepdone and [#done_return < cur_column_value#] -> returnRow0
// 				   whenReply stepfail and [#done_return == cur_column_value#] -> changeColumn 
// 				   whenReply stepfail -> error
Transition t3  whenReply stepdone -> returnRow0
			   whenReply stepfail -> changeColumn
 	 
 	State changeColumn {
 		
 		printCurrentMessage
 		
 		
 		[# for (i in 1..cur_column_value) {#]
 			[# unibo.kotlin.planner22Util.doMove("w") #]
 		[#}#]
 		
 		
 		[# unibo.kotlin.planner22Util.showMap() #]
 		
 		[#
 			done_return = 0
 			cur_column_value = 0
 			cur_column_index ++	
 		#]
 		forward basicrobot -m cmd : cmd(r)
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 		
 		delay 300

 		request basicrobot -m step: step(300) 
 		
 		
 	
 	}
 	Transition t3 whenReply stepdone -> finishChange
 				  whenReply stepfail -> endPhase_1
 				  
 	State finishChange {
 		printCurrentMessage
 		
 		[# unibo.kotlin.planner22Util.doMove("w") #]

 		forward basicrobot -m cmd : cmd(r) // anche dopo aver sbattuto, mi posiziono con verso SUD
 	
 		
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 	}
 	
 Goto moveDown
 	
 				  
 State endPhase_1 {
 		
 		printCurrentMessage
 		
 		delay 2000
 		println("")
 		println("END PHASE 1")
 		println("")
 		
 		forward basicrobot -m cmd : cmd(r) // anche dopo aver sbattuto, mi posiziono con verso SUD
 		
 		delay 300
 		
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 		
 		[# cur_column_index --	 #] // annullo l'ultimo incremento della colonna, sbagliata causa stepfail
 		forward basicrobot -m cmd : cmd(r) // direzione OVEST
 		
 		delay 300
 		
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 }
 Goto longestColumn
 	
 	
 	
 	
 	
 	
 	State longestColumn {
 		
 		printCurrentMessage
 		
 			request basicrobot -m step: step(300) 
 			
 			[# done_back++#]
 	}
 	Transition t4 whenReply stepdone and [# done_back < (cur_column_index - max_column_index)#] -> longestColumn
 				  whenReply stepdone and [# done_back == (cur_column_index - max_column_index)#] -> turnleft
 				  whenReply stepfail ->  error
 	
 	
 	
 	State turnleft {
 	
 		printCurrentMessage
 		forward basicrobot -m cmd : cmd(l) // direzione SUD
 		delay 300
 		
 	}
 	Goto lastRow
 	
	
 	State lastRow{
 		
 		request basicrobot -m step: step(300) 
 			
 			//[# done_head++#]
 		
// 		
// 		
 	
 	} 
 	Transition t4 whenReply stepdone -> lastRow
 				  whenReply stepfail ->  calibrateMap
 	
 
 	
 	
 	State calibrateMap{
 		
 		printCurrentMessage
 		[#
 			unibo.kotlin.planner22Util.setGoal(max_column_index,max_column_value)
 			unibo.kotlin.planner22Util.doPlan()
 		
 			var move = unibo.kotlin.planner22Util.getNextPlannedMove()
        	while ( move.isNotEmpty()) {
            	unibo.kotlin.planner22Util.doMove( move )
				move = unibo.kotlin.planner22Util.getNextPlannedMove()
        	}
        	
        	unibo.kotlin.planner22Util.showMap()
 			
 		#]
 		forward basicrobot -m cmd : cmd(r) // direzione OVEST
 		
 		delay 300
 		
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 		
 	}
 	
 	
 	Goto startOfLastRow
 	
 	
 	
 	
 	State startOfLastRow{
 		
 		printCurrentMessage
 		
 		request basicrobot -m step: step(300) 
 		
 		
 		
 	}
 	Transition t4 whenReply stepdone -> startOfLastRow
 				  whenReply stepfail ->  down_look_up
 	
 	
 
 State down_look_up {
 
 printCurrentMessage	
 			
 			//[# done_head++#]
 		
// 		
// 		

[# for (i in 1..max_column_index) {#] // sono partito dalla colonna più "lunga", partendo dall'alto ho trovato ostacoli dopo il massimo numero di step
 			
 		[# unibo.kotlin.planner22Util.doMove("w") #]
 			
 		[#}#]

		forward basicrobot -m cmd : cmd(r) // direzione NORTH pos(0,last)
		delay 300
 		
 		[# unibo.kotlin.planner22Util.doMove("r") #]
 		println("=============DIREZIONE NORTH, POS(0,last) ===============")
 		
 	
 	} 
 	
 
 	
// 	Goto moveUp
 	
 	
// 	
// 	
// State moveUp{
// 	
//		request basicrobot -m step: step(300) 
//
//		println("waiting for step response------------------") 
//		
// 	
// 	}
// 	
// 	Transition t1 whenReply stepdone -> goingUp
// 				  whenReply stepfail -> lookingDown
// 	
// 	
// 	State goingUp {
// 		
// 		
// 		[# unibo.kotlin.planner22Util.doMove("w") #]
// 		
//		[# unibo.kotlin.planner22Util.showMap() #]
// 		
//		request basicrobot -m step: step(300) 
//
//		println("waiting for step response------------------") 
// 	}
// 	
// 	Transition t2 whenReply stepdone -> goingUp
// 				  whenReply stepfail -> lookingDown
// 				  
// 	State lookingDown {
// 		
// 		[# if (cur_column_value > max_column_value){
// 			max_column_value = cur_column_value
// 			max_column_index = cur_column_index
// 		}#]
// 		
// 		
// 		forward basicrobot -m cmd : cmd(l)
// 		forward basicrobot -m cmd : cmd(l)
// 		
// 		[# unibo.kotlin.planner22Util.doMove("l") #]
// 		[# unibo.kotlin.planner22Util.doMove("l") #]
// 		
// 	}
// 	
// 	Goto returnRowLast
// 	
// 	
// 	State returnRowLast{
// 		[# for (i in 1..cur_column_value ) {#]
// 			forward basicrobot -m cmd : cmd(w)
// 			
// 		[# unibo.kotlin.planner22Util.doMove("w") #]
// 		[#}#]
// 	}
// 	Goto changeColumn_2
// 	
// 	State changeColumn_2 {
// 		
// 		[#
// 		
// 			cur_column_value = 0
// 			cur_column_index ++	
// 		#]
// 		forward basicrobot -m cmd : cmd(r)
// 		request basicrobot -m step: step(300) 
// 		forward basicrobot -m cmd : cmd(r) // anche dopo aver sbattuto, mi posiziono con verso SUD
// 	
// 		
// 		[# unibo.kotlin.planner22Util.doMove("r") #]
// 		[# unibo.kotlin.planner22Util.doMove("w") #]
// 		[# unibo.kotlin.planner22Util.doMove("r") #]
// 	
// 	}
// 	Transition t3 whenReply stepdone -> moveUp
// 				  whenReply stepfail -> endPhase_2
// 				  
// 				  
// 	State endPhase_2 {
// 		
// 		[# cur_column_index --	 #] // annullo l'ultimo incremento della colonna, sbagliata causa stepfail
// 		forward basicrobot -m cmd : cmd(r) // direzione OVEST
// 		
// 		
// 		[# unibo.kotlin.planner22Util.doMove("r") #]
// 	}
// 	
// 	

State error {
	printCurrentMessage
	println("")
	println("")
	println("")
	println("================Error================")
	println("")
	println("")
}
 }
 	